// <auto-generated />
using System;
using Hub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hub.Migrations
{
    [DbContext(typeof(HubDbContext))]
    [Migration("20250921173551_AddImuSamples")]
    partial class AddImuSamples
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hub.Models.CommandMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommandSentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CommandText")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReplyReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReplyText")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("CommandMessages");
                });

            modelBuilder.Entity("Hub.Models.CommandStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CommandStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sent"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Received"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Failed"
                        });
                });

            modelBuilder.Entity("Hub.Models.ImuSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("AccelX")
                        .HasColumnType("real");

                    b.Property<float>("AccelY")
                        .HasColumnType("real");

                    b.Property<float>("AccelZ")
                        .HasColumnType("real");

                    b.Property<long>("CalibAccel")
                        .HasColumnType("bigint");

                    b.Property<long>("CalibGyro")
                        .HasColumnType("bigint");

                    b.Property<long>("CalibMag")
                        .HasColumnType("bigint");

                    b.Property<long>("CalibSys")
                        .HasColumnType("bigint");

                    b.Property<float>("GyroX")
                        .HasColumnType("real");

                    b.Property<float>("GyroY")
                        .HasColumnType("real");

                    b.Property<float>("GyroZ")
                        .HasColumnType("real");

                    b.Property<float>("Heading")
                        .HasColumnType("real");

                    b.Property<float>("LinearAccelX")
                        .HasColumnType("real");

                    b.Property<float>("LinearAccelY")
                        .HasColumnType("real");

                    b.Property<float>("LinearAccelZ")
                        .HasColumnType("real");

                    b.Property<float>("MagX")
                        .HasColumnType("real");

                    b.Property<float>("MagY")
                        .HasColumnType("real");

                    b.Property<float>("MagZ")
                        .HasColumnType("real");

                    b.Property<float>("Pitch")
                        .HasColumnType("real");

                    b.Property<float>("QuaternionW")
                        .HasColumnType("real");

                    b.Property<float>("QuaternionX")
                        .HasColumnType("real");

                    b.Property<float>("QuaternionY")
                        .HasColumnType("real");

                    b.Property<float>("QuaternionZ")
                        .HasColumnType("real");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Roll")
                        .HasColumnType("real");

                    b.Property<decimal>("RoverTimeNs")
                        .HasColumnType("numeric(20,0)");

                    b.Property<float>("TemperatureC")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("ImuSamples");
                });

            modelBuilder.Entity("Hub.Models.CommandMessage", b =>
                {
                    b.HasOne("Hub.Models.CommandStatus", "Status")
                        .WithMany("Commands")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Hub.Models.CommandStatus", b =>
                {
                    b.Navigation("Commands");
                });
#pragma warning restore 612, 618
        }
    }
}
