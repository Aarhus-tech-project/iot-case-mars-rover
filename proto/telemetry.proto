syntax = "proto3";
package rover.v1;

// ====================== Telemetry ======================
message GridFrame {
  uint32 width        = 1;
  uint32 height       = 2;
  float  cell_size_m  = 3;
  bytes  data         = 4;   // width*height bytes, 0..255
  uint64 t_mono_ns    = 5;   // snapshot time (monotonic ns)
}

message Pose2D {
  float  x_m          = 1;
  float  y_m          = 2;
  float  rot_deg      = 3;
  uint64 t_mono_ns    = 4;
}

message LidarPoint {
  float x_m = 1;
  float y_m = 2;
}

message LidarScan {
  repeated LidarPoint points = 1;
}

message IMUSample {
  // Quaternion
  float w = 1;
  float x = 2;
  float y = 3;
  float z = 4;

  // Acceleration (m/s²)
  float ax = 5;
  float ay = 6;
  float az = 7;

  // Gyroscope (deg/s)
  float gx = 8;
  float gy = 9;
  float gz = 10;

  // Magnetometer (µT)
  float mx = 11;
  float my = 12;
  float mz = 13;

  // Euler angles (degrees)
  float eX = 14; // heading
  float eY = 15; // roll
  float eZ = 16; // pitch

  // Linear acceleration (m/s²)
  float lx = 17;
  float ly = 18;
  float lz = 19;

  // Temperature (°C)
  float tx = 20;

  // Calibration status (0..3)
  uint32 calib_sys   = 21;
  uint32 calib_gyro  = 22;
  uint32 calib_accel = 23;
  uint32 calib_mag   = 24;

  // Monotonic timestamp (nanoseconds)
  uint64 time_ns = 25;
}

message Ack {
  uint64 received = 1;
}

service Telemetry {
  rpc PublishGrid (stream GridFrame) returns (Ack);
  rpc PublishPose (stream Pose2D)    returns (Ack);
  rpc PublishLidar (stream LidarScan) returns (Ack);
  rpc PublishIMU (stream IMUSample)   returns (Ack);
}

// ====================== Command ======================
message TextCommand {
  string text      = 1;   // e.g. "MOVE 10cm", "ROT 90deg", "STOP"
  uint64 t_mono_ns = 2;
}

message TextReply {
  string cmd_id    = 1;   // optional correlation
  string status    = 2;   // "OK","RUNNING","DONE","ERROR"
  string message   = 3;   // human-readable
  uint64 t_mono_ns = 4;
}

service CommandLine {
  rpc Stream (stream TextReply) returns (stream TextCommand);
}